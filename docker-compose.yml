version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: database_name
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U username -d database_name"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 백엔드 API 서버
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    volumes:
      - ./backend/models:/app/backend/models:ro  # 모델 파일 마운트 (읽기 전용)
      - ./backend:/app/backend:rw  # 개발용 코드 마운트
    environment:
      - MODEL_PATH=models/tinyllama.gguf
      - LOG_LEVEL=INFO
      - USE_MOCK_EMBEDDING=false  # Mock 완전 비활성화
      - CUDA_VISIBLE_DEVICES=""
      - PYTHONPATH=/app/backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - projectoldman-network

  # 프론트엔드 웹 서버
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - projectoldman-network

volumes:
  postgres_data:

networks:
  projectoldman-network:
    driver: bridge